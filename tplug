#!/data/data/com.termux/files/usr/bin/sh

# CLI tool to manage Termux plugins
# Usage: tplug <command> [options]

HOME="/data/data/com.termux/files/home"
LOCAL_PLUGIN_DIR="$HOME/.termux-plugins"
USR_PREFIX="/data/data/com.termux/files/usr"
SERVICE_DIR="$USR_PREFIX/var/service"
LOGS_DIR="$USR_PREFIX/var/log/sv"
TERMUX_PLUGINS_REPO_URL=${TERMUX_PLUGINS_REPO_URL:-"https://github.com/dev-diaries41/termux-plugins.git"} # Allow override

# Colors for better output
GREEN="\033[0;32m"
RED="\033[0;31m"
NC="\033[0m" # No Color

# Utility functions for output
error() { echo -e "${RED}$*${NC}"; }
success() { echo -e "${GREEN}$*${NC}"; }

# Utility to ensure a directory exists
ensure_dir_exists() {
    [ -d "$1" ] || { error "Error: Directory $1 does not exist."; exit 1; }
}

# Show help message
show_help() {
    echo "Usage: tplug <command> [options]"
    echo
    echo "Commands:"
    echo "  add <service_name>           Add a plugin from the local directory."
    echo "  install [--all | <name>]     Install plugins from the repository."
    echo "  list-installed               List all installed plugins."
    echo "  remove <service_name>        Remove a plugin. Use '--purge' to remove logs."
    echo "  --help                       Show this help message."
    echo
}

# Check dependencies
check_dependencies() {
    REQUIRED_COMMANDS="git pkg"
    for cmd in $REQUIRED_COMMANDS; do
        if ! command -v $cmd >/dev/null; then
            error "Required command '$cmd' is not installed."
            exit 1
        fi
    done
}

# Install dependencies listed in plugin.yml
install_dependencies() {
    local PLUGIN_DIR="$1"
    [ -f "$PLUGIN_DIR/plugin.yml" ] || return
    echo "Installing dependencies from plugin.yml..."
    local DEPS
    DEPS=$(grep -oP '(?<=- name: )\S+' "$PLUGIN_DIR/plugin.yml" | xargs)
    [ -n "$DEPS" ] && pkg install -y $DEPS || error "Failed to install dependencies: $DEPS"
}

# Create and configure the service directory
create_service() {
    local SERVICE_NAME="$1"
    local PLUGIN_DIR="$2"

    mkdir -p "$SERVICE_DIR/$SERVICE_NAME/log"
    ln -sf "$USR_PREFIX/share/termux-services/svlogger" "$SERVICE_DIR/$SERVICE_NAME/log/run"

    if [ -f "$PLUGIN_DIR/run" ]; then
        cp "$PLUGIN_DIR/run" "$SERVICE_DIR/$SERVICE_NAME/run"
        chmod 755 "$SERVICE_DIR/$SERVICE_NAME/run"
    else
        error "'run' script missing in $PLUGIN_DIR."
        exit 1
    fi

    if [ -d "$PLUGIN_DIR/plugin" ]; then
        mkdir -p "$SERVICE_DIR/$SERVICE_NAME/plugin"
        cp -r "$PLUGIN_DIR/plugin/"* "$SERVICE_DIR/$SERVICE_NAME/plugin/"
    fi
}

# Install plugin from a specific directory
install_from_directory() {
    local PLUGIN_NAME="$1"
    local SOURCE_DIR="$2"
    local DEST_DIR="$LOCAL_PLUGIN_DIR/$PLUGIN_NAME"

    ensure_dir_exists "$SOURCE_DIR"

    mkdir -p "$DEST_DIR"
    cp -r "$SOURCE_DIR"/* "$DEST_DIR"
    add_plugin "$PLUGIN_NAME"
    success "Service $PLUGIN_NAME installed successfully."
}

# Add plugin from local directory
add_plugin() {
    local SERVICE_NAME="$1"
    ensure_dir_exists "$LOCAL_PLUGIN_DIR/$SERVICE_NAME"
    install_dependencies "$LOCAL_PLUGIN_DIR/$SERVICE_NAME"
    create_service "$SERVICE_NAME" "$LOCAL_PLUGIN_DIR/$SERVICE_NAME"
    success "Service $SERVICE_NAME added successfully."
}

# Install plugin from repository
install_plugin() {
    local ARG="$1" TEMP_DIR
    TEMP_DIR=$(mktemp -d)

    echo "Cloning repository..."
    git clone --filter=blob:none --no-checkout "$TERMUX_PLUGINS_REPO_URL" "$TEMP_DIR" || {
        error "Failed to clone repository."
        exit 1
    }
    cd "$TEMP_DIR" || exit 1

    if [ "$ARG" = "--all" ]; then
        echo "Installing all plugins..."
        git sparse-checkout init --cone && git checkout
        for PLUGIN in "$TEMP_DIR"/*/; do
            install_from_directory "$(basename "$PLUGIN")" "$PLUGIN"
        done
    else
        echo "Installing plugin $ARG..."
        git sparse-checkout init --cone
        git sparse-checkout set "$ARG" && git checkout
        ensure_dir_exists "$TEMP_DIR/$ARG"
        install_from_directory "$ARG" "$TEMP_DIR/$ARG"
    fi
    rm -rf "$TEMP_DIR"
}

# List installed plugins
list_installed_plugins() {
    echo "Installed plugins:"
    if [ -d "$LOCAL_PLUGIN_DIR" ]; then
        find "$LOCAL_PLUGIN_DIR" -maxdepth 1 -mindepth 1 -type d -exec basename {} \;
    else
        echo "No plugins installed."
    fi
}

# Purge logs for a service
purge_logs() {
    local LOG_DIR="$LOGS_DIR/$1"
    [ -d "$LOG_DIR" ] && rm -rf "$LOG_DIR"
}

# Remove plugin
remove_plugin() {
    local SERVICE_NAME="$1"
    local PURGE="$2"

    if [ -z "$SERVICE_NAME" ]; then
        error "Usage: tplug remove <service_name> [--purge]"
        exit 1
    fi

    if [ -d "$SERVICE_DIR/$SERVICE_NAME" ]; then
        echo "Removing service $SERVICE_NAME..."
        [ -L "$SERVICE_DIR/$SERVICE_NAME/log/run" ] && unlink "$SERVICE_DIR/$SERVICE_NAME/log/run"
        rm -rf "$SERVICE_DIR/$SERVICE_NAME"
    else
        error "Service $SERVICE_NAME does not exist."
    fi

    [ "$PURGE" = "--purge" ] && purge_logs "$SERVICE_NAME"
    success "Service $SERVICE_NAME removed successfully."
}

# Main
check_dependencies

case "$1" in
    add) shift; add_plugin "$@" ;;
    install) shift; install_plugin "$@" ;;
    list-installed) list_installed_plugins ;;
    remove) shift; remove_plugin "$@" ;;
    --help) show_help ;;
    *) show_help ;;
esac